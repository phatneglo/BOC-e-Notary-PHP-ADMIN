import{ax as o,ay as s,aA as a}from"./index.72b13dbe.js";const c=o("notary",{state:()=>({requests:[],processingRequests:[],notarizedDocuments:[],profile:null,stats:null,currentRequest:null,isLoading:!1,error:null}),getters:{pendingRequests:r=>r.requests.filter(e=>e.status==="pending"),completedRequests:r=>[...r.notarizedDocuments],totalPendingRequests:r=>r.requests.filter(e=>e.status==="pending").length,totalCompletedToday:r=>{const e=new Date().toISOString().split("T")[0];return r.notarizedDocuments.filter(t=>new Date(t.notarized_at).toISOString().split("T")[0]===e).length}},actions:{async fetchDashboardStats(){this.isLoading=!0,this.error=null;try{const r=await s.get("/notary/dashboard");if(r.data.success)return this.stats=r.data.data,this.stats;throw new Error(r.data.message||"Failed to load dashboard stats")}catch(r){throw console.error("Error fetching dashboard stats:",r),this.error=r.message||"An error occurred while fetching dashboard stats",r}finally{this.isLoading=!1}},async fetchQueue(){this.isLoading=!0,this.error=null;try{const r=await s.get("/notary/queue");if(r.data.success)return this.requests=r.data.data,this.requests;throw new Error(r.data.message||"Failed to load queue")}catch(r){throw console.error("Error fetching queue:",r),this.error=r.message||"An error occurred while fetching queue",r}finally{this.isLoading=!1}},async acceptRequest(r){this.isLoading=!0,this.error=null;try{const e=await s.post(`/notary/queue/${r}/accept`);if(e.data.success){const t=e.data.data.request_id;return await this.fetchQueue(),a.create({type:"positive",message:"Request accepted successfully"}),{requestId:t}}else throw new Error(e.data.message||"Failed to accept request")}catch(e){throw console.error("Error accepting request:",e),this.error=e.message||"An error occurred while accepting request",e}finally{this.isLoading=!1}},async getRequestDetails(r){this.isLoading=!0,this.error=null;try{const e=await s.get(`/notary/requests/${r}`);if(e.data.success)return this.currentRequest=e.data.data,this.currentRequest;throw new Error(e.data.message||"Failed to load request details")}catch(e){throw console.error("Error fetching request details:",e),this.error=e.message||"An error occurred while fetching request details",e}finally{this.isLoading=!1}},async getDocumentAttachments(r){this.error=null;try{const e=await s.get(`/documents/${r}/attachments`);if(e.data.success)return e.data.data;throw new Error(e.data.message||"Failed to load attachments")}catch(e){throw console.error("Error fetching attachments:",e),this.error=e.message||"An error occurred while fetching attachments",e}},async generateDocumentPreview(r){this.error=null;try{const e=await s.post("/notary/requests/preview",{document_id:r,format:"html"});if(e.data.success)return e.data.data;throw new Error(e.data.message||"Failed to generate preview")}catch(e){throw console.error("Error generating preview:",e),this.error=e.message||"An error occurred while generating preview",e}},async approveRequest(r,e){this.isLoading=!0,this.error=null;try{const t=await s.post(`/notary/requests/${r}/approve`,e);if(t.data.success)return a.create({type:"positive",message:"Document approved successfully"}),t.data.data;throw new Error(t.data.message||"Failed to approve document")}catch(t){throw console.error("Error approving document:",t),this.error=t.message||"An error occurred while approving document",t}finally{this.isLoading=!1}},async rejectRequest(r,e){this.isLoading=!0,this.error=null;try{const t=await s.post(`/notary/requests/${r}/reject`,e);if(t.data.success)return a.create({type:"positive",message:"Document rejected successfully"}),t.data.data;throw new Error(t.data.message||"Failed to reject document")}catch(t){throw console.error("Error rejecting document:",t),this.error=t.message||"An error occurred while rejecting document",t}finally{this.isLoading=!1}},async fetchProcessed(r={}){this.isLoading=!0,this.error=null;try{const e=await s.get("/notary/processed",{params:r});if(e.data.success)return this.notarizedDocuments=e.data.data,this.notarizedDocuments;throw new Error(e.data.message||"Failed to load processed documents")}catch(e){throw console.error("Error fetching processed documents:",e),this.error=e.message||"An error occurred while fetching processed documents",e}finally{this.isLoading=!1}},async getNotaryProfile(){this.error=null;try{const r=await s.get("/notary/profile");if(r.data.success)return this.profile=r.data.data,this.profile;throw new Error(r.data.message||"Failed to load notary profile")}catch(r){throw console.error("Error fetching notary profile:",r),this.error=r.message||"An error occurred while fetching notary profile",r}},async fetchNotaryProfile(){return this.getNotaryProfile()},async uploadSeal(r){this.isLoading=!0,this.error=null;try{const e=new FormData;e.append("seal",r);const t=await s.post("/notary/seal",e,{headers:{"Content-Type":"multipart/form-data"}});if(t.data.success)return this.profile&&(this.profile.has_digital_seal=!0),a.create({type:"positive",message:"Seal uploaded successfully"}),!0;throw new Error(t.data.message||"Failed to upload seal")}catch(e){throw console.error("Error uploading seal:",e),this.error=e.message||"An error occurred while uploading seal",e}finally{this.isLoading=!1}},async updateNotaryProfile(r){this.isLoading=!0,this.error=null;try{const e=await s.put("/notary/profile",r);if(e.data.success)return this.profile=e.data.data,a.create({type:"positive",message:"Profile updated successfully"}),this.profile;throw new Error(e.data.message||"Failed to update profile")}catch(e){throw console.error("Error updating profile:",e),this.error=e.message||"An error occurred while updating profile",e}finally{this.isLoading=!1}},async fetchQrSettings(){this.error=null;try{const r=await s.get("/notary/qr-settings");if(r.data.success)return r.data.data;throw new Error(r.data.message||"Failed to load QR settings")}catch(r){throw console.error("Error fetching QR settings:",r),this.error=r.message||"An error occurred while fetching QR settings",r}},async updateQrSettings(r){this.isLoading=!0,this.error=null;try{const e=await s.post("/notary/qr-settings",r);if(e.data.success)return a.create({type:"positive",message:"QR settings updated successfully"}),e.data.data;throw new Error(e.data.message||"Failed to update QR settings")}catch(e){throw console.error("Error updating QR settings:",e),this.error=e.message||"An error occurred while updating QR settings",e}finally{this.isLoading=!1}},async uploadQrLogo(r){this.isLoading=!0,this.error=null;try{const e=new FormData;e.append("logo",r);const t=await s.post("/notary/qr-logo",e,{headers:{"Content-Type":"multipart/form-data"}});if(t.data.success)return a.create({type:"positive",message:"Logo uploaded successfully"}),t.data.data;throw new Error(t.data.message||"Failed to upload logo")}catch(e){throw console.error("Error uploading logo:",e),this.error=e.message||"An error occurred while uploading logo",e}finally{this.isLoading=!1}},async generateDocumentQrCode(r){this.isLoading=!0,this.error=null;try{const e=await s.post(`/notary/document/${r}/qrcode`);if(e.data.success)return a.create({type:"positive",message:"QR code generated successfully"}),e.data.data;throw new Error(e.data.message||"Failed to generate QR code")}catch(e){throw console.error("Error generating QR code:",e),this.error=e.message||"An error occurred while generating QR code",e}finally{this.isLoading=!1}}}});export{c as u};
