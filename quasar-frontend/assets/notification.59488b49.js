import{ax as r,ay as o}from"./index.db3945b0.js";const c=r("notification",{state:()=>({notifications:[],isLoading:!1,error:null}),getters:{unreadCount:t=>t.notifications.filter(i=>!i.is_read).length,byType:t=>i=>t.notifications.filter(e=>e.type===i),recentNotifications:t=>{const i=new Date,e=new Date(i.getTime()-24*60*60*1e3);return t.notifications.filter(s=>new Date(s.timestamp)>=e)}},actions:{async fetchNotifications(t={}){var i,e;this.isLoading=!0;try{const s=await o.get("/notifications",{params:t});if(s.data.success)return this.notifications=s.data.data,this.notifications}catch(s){console.error("Error fetching notifications:",s),this.error=((e=(i=s.response)==null?void 0:i.data)==null?void 0:e.message)||"Failed to fetch notifications"}finally{this.isLoading=!1}},async markAsRead(t){try{if((await o.put(`/notifications/${t}`)).data.success){const e=this.notifications.find(s=>s.id===t);return e&&(e.is_read=!0),!0}}catch(i){throw console.error("Error marking notification as read:",i),i}},async markAllAsRead(){try{if((await o.put("/notifications/read-all")).data.success)return this.notifications.forEach(i=>{i.is_read=!0}),!0}catch(t){throw console.error("Error marking all notifications as read:",t),t}},async deleteNotification(t){try{if((await o.delete(`/notifications/${t}`)).data.success)return this.notifications=this.notifications.filter(e=>e.id!==t),!0}catch(i){throw console.error("Error deleting notification:",i),i}},addLocalNotification(t){const i=Math.random().toString(36).substring(2,15),e=new Date().toISOString(),s={id:i,timestamp:e,type:t.type||"system",target:t.target||"",subject:t.subject||"New Notification",body:t.body||"",link:t.link||"",from_system:t.from_system||"system",is_read:!1,created_at:e};this.notifications.unshift(s)}}});export{c as u};
